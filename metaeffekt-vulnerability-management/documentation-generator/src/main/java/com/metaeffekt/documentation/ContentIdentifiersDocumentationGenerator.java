package com.metaeffekt.documentation;

import com.metaeffekt.mirror.contents.store.*;
import com.thoughtworks.qdox.JavaProjectBuilder;
import com.thoughtworks.qdox.model.JavaClass;
import com.thoughtworks.qdox.model.JavaField;
import org.apache.commons.io.FileUtils;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static com.metaeffekt.documentation.MarkdownDocUtils.formatClassName;

public class ContentIdentifiersDocumentationGenerator {

    public void generateDocumentation(JavaProjectBuilder project) throws IOException {

        final Map<String, ContentIdentifierStore<?>> contentIdentifierStoresInstances = new HashMap<>();
        contentIdentifierStoresInstances.put("advisory", AdvisoryTypeStore.get());
        contentIdentifierStoresInstances.put("vulnerability", VulnerabilityTypeStore.get());
        contentIdentifierStoresInstances.put("other", OtherTypeStore.get());

        final Map<String, Class<?>> contentIdentifierStores = new HashMap<>();
        for (Map.Entry<String, ContentIdentifierStore<?>> entry : contentIdentifierStoresInstances.entrySet()) {
            contentIdentifierStores.put(entry.getKey(), entry.getValue().getClass());
        }

        final Map<String, JavaClass> contentIdentifierClasses = new HashMap<>();
        for (Map.Entry<String, Class<?>> entry : contentIdentifierStores.entrySet()) {
            final JavaClass clazz = project.getClassByName(entry.getValue().getName());
            if (clazz == null) {
                throw new IllegalStateException("Content Identifier Store Class " + entry.getValue().getName() + " not found in project.");
            }
            contentIdentifierClasses.put(entry.getKey(), clazz);
        }

        final Map<String, String> templateReplacements = new HashMap<>();

        // iterate over all fields of the content identifier stores that inherit from the type ContentIdentifierStore.ContentIdentifier
        for (Map.Entry<String, JavaClass> entry : contentIdentifierClasses.entrySet()) {
            final ContentIdentifierStore<?> store = contentIdentifierStoresInstances.get(entry.getKey());
            final Class<?> storeClass = contentIdentifierStores.get(entry.getKey());
            final JavaClass javaClazz = entry.getValue();

            final boolean isVulnerabilityStore = VulnerabilityTypeStore.class.isAssignableFrom(storeClass);
            final boolean isAdvisoryStore = AdvisoryTypeStore.class.isAssignableFrom(storeClass);

            final StringBuilder storeDocumentation = new StringBuilder();

            // build a table
            storeDocumentation.append("| Name | Display Name | Implementation |")
                    .append(isVulnerabilityStore ? " Data Type | Query Type |" : "").append(isAdvisoryStore ? " Data Type | Query Type |" : "")
                    .append(" ID Pattern | Comment |")
                    .append("\n")
                    .append("|------|--------------|----------------|")
                    .append(isVulnerabilityStore ? "-----------|-----------|" : "").append(isAdvisoryStore ? "-----------|-----------|" : "")
                    .append("------------|---------|")
                    .append("\n");

            for (ContentIdentifierStore.ContentIdentifier identifier : store.values()) {
                final String name = identifier.getName();
                final String wellFormedName = identifier.getWellFormedName();
                final String implementation = identifier.getImplementation();
                final String idPattern = identifier.getIdPattern().pattern().replace("|", "\\|");

                final JavaField field = javaClazz.getFields().stream()
                        .filter(f -> f.getCodeBlock().contains("\"" + name + "\""))
                        .findFirst()
                        .orElseThrow(() -> new IllegalStateException("Field " + name + " not found in class " + javaClazz.getFullyQualifiedName()));
                final String comment = field.getComment() == null ? "" : field.getComment().replaceAll("\n", "<br>").replaceAll("\r", "");

                storeDocumentation.append("| ").append(name)
                        .append(" | ").append(wellFormedName)
                        .append(" | ").append(implementation.equals(name) ? "" : implementation)
                        .append(" | ");

                if (isVulnerabilityStore) {
                    final VulnerabilityTypeIdentifier<?> vulnerabilityIdentifier = (VulnerabilityTypeIdentifier<?>) identifier;
                    storeDocumentation.append(formatClassName(optString(() -> vulnerabilityIdentifier.getVulnerabilityClass().getSimpleName())))
                            .append(" | ").append(formatClassName(optString(() -> vulnerabilityIdentifier.getVulnerabilityIndexQueryClass().getSimpleName())))
                            .append(" | ");
                }
                if (isAdvisoryStore) {
                    final AdvisoryTypeIdentifier<?> advisoryIdentifier = (AdvisoryTypeIdentifier<?>) identifier;
                    storeDocumentation.append(formatClassName(optString(() -> advisoryIdentifier.getAdvisoryClass().getSimpleName())))
                            .append(" | ").append(formatClassName(optString(() -> advisoryIdentifier.getAdvisorIndexQueryClass().getSimpleName())))
                            .append(" | ");
                }

                storeDocumentation
                        .append("<code>").append(idPattern).append("</code>").append(" | ")
                        .append(comment).append(" |");

                storeDocumentation.append("\n");
            }

            templateReplacements.put("store-doc-" + entry.getKey(), storeDocumentation.toString());
        }

        final List<String> downloadTargetLines = DocumentationGenerator.fillTemplate(DocumentationGenerator.getVulnerabilityDocumentationFile("inventory-enrichment/template/content-identifiers.md"), templateReplacements);
        DocumentationGenerator.assertTemplateFullyFilled("content-identifiers.md", downloadTargetLines);

        FileUtils.writeLines(DocumentationGenerator.getVulnerabilityDocumentationFile("inventory-enrichment/content-identifiers.md"), downloadTargetLines);
    }

    private String optString(ThrowableSupplier<String> supplier) {
        try {
            return supplier.get();
        } catch (Exception e) {
            return "";
        }
    }

    private interface ThrowableSupplier<T> {
        T get() throws Exception;
    }
}
