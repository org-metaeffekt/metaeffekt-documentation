package com.metaeffekt.documentation.util;

import java.io.*;
import java.util.List;
import java.util.Properties;
import java.util.stream.Collectors;

public class DocumentationProperties {

    private static Properties properties = new Properties();

    static {
        try {
            properties.load(DocumentationProperties.class.getResource("/documentation-generator.properties").openStream());
        } catch (IOException e) {
            throw new RuntimeException("Unable to load documentation properties.", e);
        }

        System.out.println("Loaded configuration properties: " + properties);
    }

    public static String getString(String key) {
        return properties.getProperty(key);
    }

    public static String getString(String key, String defaultValue) {
        return properties.getProperty(key, defaultValue);
    }

    public static File getArtifactAnalysisPath() {
        return new File(properties.getProperty("project.path.artifact.analysis"));
    }

    public static File getCorePath() {
        return new File(properties.getProperty("project.path.core"));
    }

    public static File getDocumentationProjectPath() {
        return new File(properties.getProperty("project.path.documentation"));
    }

    public static File getMirrorPath() {
        return new File(properties.getProperty("data.path.mirror"));
    }

    /**
     * <a href="https://stackoverflow.com/a/46613809/15925251">See this answer</a>
     *
     * @param resourceName the name of the resource to load
     * @return the resource as a list of strings
     */
    public static List<String> loadResource(String resourceName) {
        try (InputStream is = DocumentationProperties.class.getResourceAsStream(resourceName)) {
            if (is == null) throw new IllegalArgumentException("Resource not found: " + resourceName);
            try (InputStreamReader isr = new InputStreamReader(is);
                 BufferedReader reader = new BufferedReader(isr)) {
                return reader.lines().collect(Collectors.toList());
            } catch (IOException e) {
                throw new RuntimeException("Unable to read resource: " + resourceName, e);
            }
        } catch (IOException e) {
            throw new RuntimeException("Unable to load resource: " + resourceName, e);
        }
    }
}
