package com.metaeffekt.documentation;

import com.thoughtworks.qdox.JavaProjectBuilder;
import com.thoughtworks.qdox.model.JavaClass;
import com.thoughtworks.qdox.model.JavaType;
import org.apache.commons.io.FileUtils;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class DocumentationGenerator {

    public static void main(String[] args) throws IOException, ClassNotFoundException, InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {
        final JavaProjectBuilder project = new JavaProjectBuilder();
        project.addSourceTree(DocumentationProperties.getArtifactAnalysisPath());
        project.addSourceTree(DocumentationProperties.getCorePath());

        new MirrorDocumentationGenerator().generateDocumentation(project);
        new InventoryEnrichmentStepsDocumentationGenerator().generateDocumentation(project);
    }

    public static List<JavaClass> findClassesExtending(JavaProjectBuilder project, String className) {
        final List<JavaClass> classes = new ArrayList<>();

        for (JavaClass clazz : project.getClasses()) {
            JavaType superClass = clazz.getSuperClass();

            while (superClass != null) {
                if (superClass.getFullyQualifiedName().equals(className)) {
                    classes.add(clazz);
                    break;
                }

                // fetch the superclass as JavaClass to continue up the hierarchy
                JavaClass superClassClass = project.getClassByName(superClass.getFullyQualifiedName());
                if (superClassClass != null) {
                    superClass = superClassClass.getSuperClass();
                } else {
                    break;
                }
            }
        }

        return classes;
    }

    public static File getVulnerabilityDocumentationFile(String path) {
        return new File(DocumentationProperties.getDocumentationProjectPath().getAbsolutePath() + "/metaeffekt-vulnerability-management/" + path);
    }

    public static List<String> fillTemplate(File templateFile, Map<String, String> replacements) throws IOException {
        final List<String> lines = FileUtils.readLines(templateFile, StandardCharsets.UTF_8);
        final List<String> filledLines = new ArrayList<>();

        for (String line : lines) {
            for (Map.Entry<String, String> replacement : replacements.entrySet()) {
                line = line.replace("$gen{" + replacement.getKey() + "}", replacement.getValue());
            }
            filledLines.add(line);
        }

        return filledLines;
    }

    public static void assertTemplateFullyFilled(String template, List<String> lines) {
        for (String line : lines) {
            if (line.contains("$gen{")) {
                throw new IllegalStateException("Template [" + template + "] not fully filled: " + line);
            }
        }
    }
}
