package com.metaeffekt.documentation;

import com.metaeffekt.mirror.download.documentation.InventoryEnrichmentPhase;
import com.thoughtworks.qdox.JavaProjectBuilder;
import com.thoughtworks.qdox.model.JavaAnnotation;
import com.thoughtworks.qdox.model.JavaClass;
import org.apache.commons.io.FileUtils;

import java.io.IOException;
import java.util.*;

import static com.metaeffekt.documentation.MarkdownDocUtils.*;

public class InventoryEnrichmentStepsDocumentationGenerator {

    public void generateDocumentation(JavaProjectBuilder project) throws IOException {
        final List<JavaClass> inventoryEnrichmentClasses = excludeAllThatAreExtendedByOthers(MirrorDocumentationGenerator.orderEnrichmentClasses(DocumentationGenerator.findClassesExtending(project, "com.metaeffekt.artifact.enrichment.InventoryEnricher")));
        final Map<String, List<JavaClass>> enrichersByPhase = groupEnrichersByPhases(inventoryEnrichmentClasses);
        final List<JavaClass> configurationClasses = excludeAllThatAreExtendedByOthers(DocumentationGenerator.findClassesExtending(project, "org.metaeffekt.core.inventory.processor.configuration.ProcessConfiguration"));

        final Map<String, String> templateReplacements = new HashMap<>();

        final StringJoiner inventoryEnrichersList = new StringJoiner("\n", "", "");

        for (Map.Entry<String, List<JavaClass>> enrichersBySinglePhase : enrichersByPhase.entrySet()) {
            final String phase = enrichersBySinglePhase.getKey();
            final String phaseDisplayName = InventoryEnrichmentPhase.valueOf(enrichersBySinglePhase.getKey()).displayName();
            final List<JavaClass> enrichers = enrichersBySinglePhase.getValue();

            final StringJoiner inventoryEnrichersDetailsJoiner = new StringJoiner("\n\n");
            final StringJoiner inventoryEnrichersListElement = new StringJoiner("\n  - ", "- **[" + phaseDisplayName + "](#" + toMarkdownId(phaseDisplayName) + ")**\n  - ", "");

            for (JavaClass enricher : enrichers) {
                inventoryEnrichersListElement.add("[" + formatClassNameApplyDeprecated(enricher) + "](#" + toMarkdownId(formatClassNameApplyDeprecated(enricher)) + ")");
                inventoryEnrichersDetailsJoiner.add(generateInventoryEnricherDocumentation(project, enricher));
            }

            inventoryEnrichersList.add(inventoryEnrichersListElement.toString());
            templateReplacements.put("enrichment-steps-full-doc-" + phase, inventoryEnrichersDetailsJoiner.toString());
            templateReplacements.put("enrichment-steps-phase-title-" + phase, phaseDisplayName);
        }
        templateReplacements.put("enrichment-steps-active", inventoryEnrichersList.toString());


        final List<String> downloadTargetLines = DocumentationGenerator.fillTemplate(DocumentationGenerator.getVulnerabilityDocumentationFile("inventory-enrichment/template/inventory-enrichment-steps.md"), templateReplacements);
        DocumentationGenerator.assertTemplateFullyFilled("inventory-enrichment-steps.md", downloadTargetLines);

        FileUtils.writeLines(DocumentationGenerator.getVulnerabilityDocumentationFile("inventory-enrichment/inventory-enrichment-steps.md"), downloadTargetLines);
    }

    private String generateInventoryEnricherDocumentation(JavaProjectBuilder project, JavaClass clazz) {
        final StringBuilder content = new StringBuilder();

        content.append("## ").append(formatClassNameApplyDeprecated(clazz)).append("\n\n");

        content.append(MirrorDocumentationGenerator.generateDocRelevantMethodExpandables(project, clazz, "performEnrichment")).append("\n");

        if (clazz.getComment() != null && !clazz.getComment().isEmpty()) {
            content.append(clazz.getComment()).append("\n\n");
        }

        return content.toString();
    }

    private Map<String, List<JavaClass>> groupEnrichersByPhases(List<JavaClass> inventoryEnrichmentClasses) {
        // use the "phase" value of the EnricherMetadata annotation to group the enrichers
        final Map<String, List<JavaClass>> enrichersByPhase = new LinkedHashMap<>();

        for (InventoryEnrichmentPhase phase : InventoryEnrichmentPhase.values()) {
            enrichersByPhase.computeIfAbsent(phase.name(), k -> new ArrayList<>());
        }

        for (JavaClass clazz : inventoryEnrichmentClasses) {
            final JavaAnnotation enricherMetadata = clazz.getAnnotations().stream().filter(a -> a.getType().getValue().contains("EnricherMetadata")).findFirst().orElseThrow(() -> new IllegalArgumentException("No EnricherMetadata annotation found on class " + clazz.getName()));

            final String phase = enricherMetadata
                    .getProperty("phase").getParameterValue().toString()
                    .replace("\"", "")
                    .replace(InventoryEnrichmentPhase.class.getSimpleName() + ".", "");

            enrichersByPhase.computeIfAbsent(phase, k -> new ArrayList<>()).add(clazz);
        }

        return enrichersByPhase;
    }
}
