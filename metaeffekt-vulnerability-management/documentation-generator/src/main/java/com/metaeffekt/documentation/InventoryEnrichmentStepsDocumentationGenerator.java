package com.metaeffekt.documentation;

import com.thoughtworks.qdox.JavaProjectBuilder;
import com.thoughtworks.qdox.model.JavaClass;
import org.apache.commons.io.FileUtils;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

import static com.metaeffekt.documentation.MarkdownDocUtils.*;

public class InventoryEnrichmentStepsDocumentationGenerator {

    public void generateDocumentation(JavaProjectBuilder project) throws IOException {
        final List<JavaClass> inventoryEnrichmentClasses = excludeAllThatAreExtendedByOthers(MirrorDocumentationGenerator.orderEnrichmentClasses(DocumentationGenerator.findClassesExtending(project, "com.metaeffekt.artifact.enrichment.InventoryEnricher")));
        final List<JavaClass> configurationClasses = excludeAllThatAreExtendedByOthers(DocumentationGenerator.findClassesExtending(project, "org.metaeffekt.core.inventory.processor.configuration.ProcessConfiguration"));


        final Map<String, String> templateReplacements = new HashMap<>();

        final StringJoiner inventoryEnrichersList = new StringJoiner("\n- ", "- ", "");
        final StringJoiner inventoryEnrichersDetailsJoiner = new StringJoiner("\n\n");
        for (JavaClass clazz : inventoryEnrichmentClasses) {
            inventoryEnrichersList.add("[" + formatClassNameApplyDeprecated(clazz) + "](#" + toMarkdownId(formatClassNameApplyDeprecated(clazz)) + ")");
            inventoryEnrichersDetailsJoiner.add(generateInventoryEnricherDocumentation(project, clazz));
        }
        templateReplacements.put("enrichment-steps-active", inventoryEnrichersList.toString());
        templateReplacements.put("enrichment-steps-full-doc", inventoryEnrichersDetailsJoiner.toString());


        final List<String> downloadTargetLines = DocumentationGenerator.fillTemplate(DocumentationGenerator.getVulnerabilityDocumentationFile("inventory-enrichment/template/inventory-enrichment-steps.md"), templateReplacements);

        FileUtils.writeLines(DocumentationGenerator.getVulnerabilityDocumentationFile("inventory-enrichment/inventory-enrichment-steps.md"), downloadTargetLines);
    }

    private String generateInventoryEnricherDocumentation(JavaProjectBuilder project, JavaClass clazz) {
        final StringBuilder content = new StringBuilder();

        content.append("## ").append(formatClassNameApplyDeprecated(clazz)).append("\n\n");

        content.append(MirrorDocumentationGenerator.generateDocRelevantMethodExpandables(project, clazz, "performEnrichment")).append("\n");

        if (clazz.getComment() != null && !clazz.getComment().isEmpty()) {
            content.append(clazz.getComment()).append("\n\n");
        }

        return content.toString();
    }
}
