package com.metaeffekt.documentation.generator;

import com.metaeffekt.artifact.analysis.utils.TimeUtils;
import com.metaeffekt.documentation.DocumentationGenerator;
import com.metaeffekt.documentation.IDocumentationGenerator;
import com.metaeffekt.documentation.util.DocumentationProperties;
import com.metaeffekt.documentation.util.MarkdownDocUtils;
import com.metaeffekt.mirror.contents.eol.EolCycle;
import com.metaeffekt.mirror.contents.msrcdata.MsrcProduct;
import com.metaeffekt.mirror.query.EolIndexQuery;
import com.metaeffekt.mirror.query.MsrcProductIndexQuery;
import com.thoughtworks.qdox.JavaProjectBuilder;
import org.apache.commons.io.FileUtils;

import java.util.*;
import java.util.stream.Collectors;

public class EolDataDocumentationGenerator implements IDocumentationGenerator {
    @Override
    public void generateDocumentation(JavaProjectBuilder project) throws Exception {
        final EolIndexQuery query = new EolIndexQuery(DocumentationProperties.getMirrorPath());

        final List<String> generateForProducts = Arrays.asList(
                "windows"
        );

        final Map<String, String> templateReplacements = new HashMap<>();

        templateReplacements.put("index-time", TimeUtils.formatNormalizedDate(new Date(query.getIndex().getDirectoryLastModified())));

        final StringJoiner toc = new StringJoiner("\n");
        for (String generateForProduct : generateForProducts) {
            toc.add("- [" + generateForProduct + "](#" + MarkdownDocUtils.toMarkdownId(generateForProduct) + ")");
        }
        templateReplacements.put("toc", toc.toString());


        final Map<String, Map<String, Map<String, String>>> additionalCycleInformation = constructAdditionalCycleInformation();
        final StringBuilder productCycles = new StringBuilder();
        for (String generateForProduct : generateForProducts) {
            productCycles.append(generateCycleTableForProduct(query, generateForProduct, additionalCycleInformation));
            productCycles.append("\n\n");
        }
        templateReplacements.put("product-cycles", productCycles.toString());


        final List<String> downloadTargetLines = DocumentationGenerator.fillTemplate(DocumentationGenerator.getVulnerabilityDocumentationFile("data-mirror/template/eol-data-specific-cycles.md"), templateReplacements);
        DocumentationGenerator.assertTemplateFullyFilled("eol-data-specific-cycles.md", downloadTargetLines);
        FileUtils.writeLines(DocumentationGenerator.getVulnerabilityDocumentationFile("data-mirror/eol/eol-data-specific-cycles.md"), downloadTargetLines);
    }

    private static String generateCycleTableForProduct(EolIndexQuery query, String product, Map<String, Map<String, Map<String, String>>> additionalCycleInformation) {
        final Map<String, Map<String, String>> addonInfo = additionalCycleInformation.get(product);
        final boolean isAdditionalInfoAvailableOnProduct = addonInfo != null && !addonInfo.isEmpty();

        final List<String> additionalInfoKeys = new ArrayList<>();
        if (isAdditionalInfoAvailableOnProduct) {
            for (Map.Entry<String, Map<String, String>> entry : addonInfo.entrySet()) {
                for (String key : entry.getValue().keySet()) {
                    if (!additionalInfoKeys.contains(key)) {
                        additionalInfoKeys.add(key);
                    }
                }
            }
        }

        final StringJoiner joiner = new StringJoiner("\n");
        joiner.add("### " + product + "\n");
        joiner.add("View generated using the data from [End-of-Life / " + product + "](https://endoflife.date/" + product + ")" + (isAdditionalInfoAvailableOnProduct ? " and additional information" : "") + ".\n");

        joiner.add("| Release | Cycle | Latest |" + additionalInfoKeys.stream().map(key -> key + " |").reduce("", (a, b) -> a + " " + b))
                .add("| --- | --- | --- |" + additionalInfoKeys.stream().map(key -> "--- |").reduce("", (a, b) -> a + " " + b));

        for (EolCycle cycle : query.findCyclesByProduct(product).getCycles()) {
            final Map<String, String> additionalInfo = isAdditionalInfoAvailableOnProduct ? addonInfo.get(cycle.getCycle()) : null;
            final boolean isAdditionalInfoAvailableOnCycle = additionalInfo != null && !additionalInfo.isEmpty();

            String cycleReleaseLabel = "";
            if (cycle.getReleaseLabel() != null) {
                cycleReleaseLabel = "`" + cycle.getReleaseLabel() + "`";
                if (cycle.getLink() != null) {
                    cycleReleaseLabel = "[" + cycleReleaseLabel + "](" + cycle.getLink() + ")";
                }
            }
            if (cycle.getLatestReleaseDate() != null) {
                cycleReleaseLabel += cycleReleaseLabel.isEmpty() ? cycle.getLatestReleaseDate() : " (" + cycle.getLatestReleaseDate() + ")";
            }

            final String additionalInfoRow = isAdditionalInfoAvailableOnCycle ? additionalInfoKeys.stream().map(key -> additionalInfo.getOrDefault(key, "") + " |").reduce("", (a, b) -> a + " " + b) : "";
            final String row = "| " + cycleReleaseLabel + " | `" + cycle.getCycle() + "` | `" + cycle.getLatest() + "` |" + additionalInfoRow;

            joiner.add(row);
        }
        return joiner.toString();
    }

    private static Map<String, Map<String, Map<String, String>>> constructAdditionalCycleInformation() {
        final Map<String, Map<String, Map<String, String>>> additionalCycleInformation = new HashMap<>();

        final Map<String, Map<String, String>> windows = new HashMap<>();
        additionalCycleInformation.put("windows", windows);

        putAddon(windows, "10-1507", "Build", "**Threshold**<br>Build number 10240 on July 29, 2015");
        putAddon(windows, "10-1507-e-lts", "Build", "**Threshold**<br>Build number 10240 on July 29, 2015");
        putAddon(windows, "10-1511", "Build", "**Threshold 2: November Update**<br>Build number 10586 on November 10, 2015");
        putAddon(windows, "10-1607-e", "Build", "**Redstone: Anniversary Update**<br>Build number 14393 on August 2, 2016");
        putAddon(windows, "10-1607-e-lts", "Build", "**Redstone: Anniversary Update**<br>Build number 14393 on August 2, 2016");
        putAddon(windows, "10-1607-w", "Build", "**Redstone: Anniversary Update**<br>Build number 14393 on August 2, 2016");
        putAddon(windows, "10-1703-e", "Build", "**Redstone 2: Creators Update**<br>Build number 15063 on April 5, 2017");
        putAddon(windows, "10-1703-w", "Build", "**Redstone 2: Creators Update**<br>Build number 15063 on April 5, 2017");
        putAddon(windows, "10-1709-e", "Build", "**Redstone 3: Fall Creators Update**<br>Build number 16299 on October 17, 2017");
        putAddon(windows, "10-1709-w", "Build", "**Redstone 3: Fall Creators Update**<br>Build number 16299 on October 17, 2017");
        putAddon(windows, "10-1803-e", "Build", "**Redstone 4: April 2018 Update**<br>Build number 17134 on April 30, 2018");
        putAddon(windows, "10-1803-w", "Build", "**Redstone 4: April 2018 Update**<br>Build number 17134 on April 30, 2018");
        putAddon(windows, "10-1809-e", "Build", "**Redstone 5: October 2018 Update**<br>Build number 17763 on November 13, 2018");
        putAddon(windows, "10-1809-e-lts", "Build", "**Redstone 5: October 2018 Update**<br>Build number 17763 on November 13, 2018");
        putAddon(windows, "10-1809-w", "Build", "**Redstone 5: October 2018 Update**<br>Build number 17763 on November 13, 2018");
        putAddon(windows, "10-1903", "Build", "**19H1: May 2019 Update**<br>Build number 18362 on May 21, 2019");
        putAddon(windows, "10-1909-e", "Build", "**19H2: November 2019 Update**<br>Build number 18363 on November 12, 2019");
        putAddon(windows, "10-1909-w", "Build", "**19H2: November 2019 Update**<br>Build number 18363 on November 12, 2019");
        putAddon(windows, "10-2004", "Build", "**20H1: May 2020 Update**<br>Build number 19041 on May 27, 2020");
        putAddon(windows, "10-20h2-e", "Build", "**20H2: October 2020 Update**<br>Build number 19042 on October 20, 2020");
        putAddon(windows, "10-20h2-w", "Build", "**20H2: October 2020 Update**<br>Build number 19042 on October 20, 2020");
        putAddon(windows, "10-21h1", "Build", "**21H1: May 2021 Update**<br>Build number 19043 on May 18, 2021");
        putAddon(windows, "10-21h2-e", "Build", "**21H2: November 2021 Update**<br>Build number 19044 on November 16, 2021");
        putAddon(windows, "10-21h2-e-lts", "Build", "**21H2: November 2021 Update**<br>Build number 19044 on November 16, 2021");
        putAddon(windows, "10-21h2-iot-lts", "Build", "**21H2: November 2021 Update**<br>Build number 19044 on November 16, 2021");
        putAddon(windows, "10-21h2-w", "Build", "**21H2: November 2021 Update**<br>Build number 19044 on November 16, 2021");
        putAddon(windows, "10-22h2", "Build", "**22H2: 2022 Update**<br>Build number 19045 on October 18, 2022");
        putAddon(windows, "11-21h2-e", "Build", "**Sun Valley**<br>Build number 22000 on October 5, 2021");
        putAddon(windows, "11-21h2-w", "Build", "**Sun Valley**<br>Build number 22000 on October 5, 2021");
        putAddon(windows, "11-22h2-e", "Build", "**Sun Valley 2: 2022 Update**<br>Build number 22621 on September 20, 2022");
        putAddon(windows, "11-22h2-w", "Build", "**Sun Valley 2: 2022 Update**<br>Build number 22621 on September 20, 2022");
        putAddon(windows, "11-23h2-e", "Build", "**Sun Valley 3: 2023 Update**<br>Build number 22631 on October 31, 2023");
        putAddon(windows, "11-23h2-w", "Build", "**Sun Valley 3: 2023 Update**<br>Build number 22631 on October 31, 2023");

        final Set<String> windowsCycles = new HashSet<>(windows.keySet());
        final MsrcProductIndexQuery msrcQuery = new MsrcProductIndexQuery(DocumentationProperties.getMirrorPath());
        for (String cycle : windowsCycles) {
            // extract the middle part of the cycle name (e.g. 10-1507 -> 1507)
            final String cycleStart = cycle.replaceAll("([^-]+)-[^-]+(?:-.+)?", "$1");
            final String cycleMiddle = cycle.replaceAll("[^-]+-([^-]+)(?:-.+)?", "$1");

            final String queryString = "Windows " + cycleStart + " Version " + cycleMiddle;

            final List<MsrcProduct> results = msrcQuery.findProductByNameFuzzyIfNoExactMatch(queryString).stream()
                    .filter(p -> p.getFamily().equalsIgnoreCase("Microsoft") && p.getVendor().contains("Windows"))
                    .filter(p -> !p.getName().contains("Raw Image Extension"))
                    .filter(p -> p.getName().contains("x64") || p.getName().contains("ARM64") || p.getName().contains("32-bit"))
                    .collect(Collectors.toList());
            if (results.isEmpty()) {
                System.err.println("No MSRC Product Id results for: " + queryString);
                continue;
            }

            putAddon(windows, cycle, "MS Product Ids", results.stream().map(p -> "`" + p.getId() + "` - " + p.getName()).collect(Collectors.joining("<br>")));
        }

        return additionalCycleInformation;
    }

    private static void putAddon(Map<String, Map<String, String>> map, String cycle, String key, String value) {
        map.computeIfAbsent(cycle, k -> new LinkedHashMap<>()).put(key, value);
    }

    private static Map<String, String> constructMap(String... values) {
        final Map<String, String> map = new LinkedHashMap<>();
        for (int i = 0; i < values.length; i += 2) {
            map.put(values[i], values[i + 1]);
        }
        return map;
    }
}
