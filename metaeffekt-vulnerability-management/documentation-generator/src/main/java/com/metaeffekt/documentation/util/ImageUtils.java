package com.metaeffekt.documentation.util;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

public class ImageUtils {

    /**
     * Crops images in the specified directory that start with the given prefix.
     *
     * @param dir     The path to the directory containing images.
     * @param prefix  The prefix that image filenames should start with.
     * @param padding The amount of padding to add around the cropped area.
     */
    public static void cropImagesInDirectoryToColoredArea(File dir, String prefix, int padding) throws IOException {
        if (!dir.isDirectory()) {
            throw new IllegalArgumentException("Invalid directory: " + dir);
        }

        // Filter files that start with the given prefix and end with '.png'
        File[] files = dir.listFiles((d, name) -> name.startsWith(prefix) && name.toLowerCase().endsWith(".png"));

        if (files == null) {
            throw new IllegalArgumentException("No files found in directory: " + dir);
        }

        for (File file : files) {
            BufferedImage image = ImageIO.read(file);
            if (image == null) {
                throw new IOException("Failed to read image: " + file.getName());
            }

            int width = image.getWidth();
            int height = image.getHeight();

            // Initialize the bounding box
            int top = height - 1;
            int left = width - 1;
            int bottom = 0;
            int right = 0;

            boolean foundNonWhitePixel = false;

            // Scan the image to find non-white pixels
            for (int y = 0; y < height; y++) {
                for (int x = 0; x < width; x++) {
                    int rgb = image.getRGB(x, y);
                    if (!isWhite(rgb)) {
                        foundNonWhitePixel = true;
                        if (x < left) left = x;
                        if (x > right) right = x;
                        if (y < top) top = y;
                        if (y > bottom) bottom = y;
                    }
                }
            }

            // Skip if no non-white pixels are found
            if (!foundNonWhitePixel) {
                System.out.println("No non-white pixels found in image: " + file.getName());
                continue;
            }

            // Add padding and ensure bounds are within the image dimensions
            left = Math.max(0, left - padding);
            right = Math.min(width - 1, right + padding);
            top = Math.max(0, top - padding);
            bottom = Math.min(height - 1, bottom + padding);

            int newWidth = right - left + 1;
            int newHeight = bottom - top + 1;

            // Crop the image
            BufferedImage croppedImage = image.getSubimage(left, top, newWidth, newHeight);

            // Overwrite the original image file
            ImageIO.write(croppedImage, "png", file);

            System.out.println("Processed image: " + file.getName());
        }
    }

    /**
     * Checks if a pixel is pure white or fully transparent.
     *
     * @param rgb The integer representation of the pixel's color.
     * @return True if the pixel is white or transparent; false otherwise.
     */
    private static boolean isWhite(int rgb) {
        int alpha = (rgb >> 24) & 0xFF;
        int red = (rgb >> 16) & 0xFF;
        int green = (rgb >> 8) & 0xFF;
        int blue = rgb & 0xFF;

        // Treat fully transparent pixels as white
        if (alpha == 0) {
            return true;
        }

        return red == 255 && green == 255 && blue == 255;
    }
}

