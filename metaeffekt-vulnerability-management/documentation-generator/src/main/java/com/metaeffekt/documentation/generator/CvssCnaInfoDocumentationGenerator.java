package com.metaeffekt.documentation.generator;

import com.metaeffekt.documentation.DocumentationGenerator;
import com.metaeffekt.documentation.IDocumentationGenerator;
import com.thoughtworks.qdox.JavaProjectBuilder;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.ObjectUtils;
import org.metaeffekt.core.security.cvss.CvssSource;
import org.metaeffekt.core.security.cvss.KnownCvssEntities;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Map;

public class CvssCnaInfoDocumentationGenerator implements IDocumentationGenerator {

    public void generateDocumentation(JavaProjectBuilder project) throws IOException {
        final StringBuilder out = new StringBuilder();

        out.append("<html>\n<head>\n<script type=\"text/javascript\" src=\"https://unpkg.com/vis-network/standalone/umd/vis-network.min.js\"></script>\n</head>\n<body>\n<div id=\"mynetwork\"></div>\n<script type=\"text/javascript\">\n");
        out.append("var nodes = new vis.DataSet([\n");
        for (Map.Entry<String, CvssSource.CvssEntity> entity : KnownCvssEntities.getEntitiesByKeyName().entrySet()) {
            out.append("{id: '").append(entity.getKey()).append("', label: '").append(entity.getValue().getEscapedName()).append("'},\n");
        }
        out.append("]);\n");
        out.append("var edges = new vis.DataSet([\n");
        for (Map.Entry<String, CvssSource.CvssEntity> entity : KnownCvssEntities.getEntitiesByKeyName().entrySet()) {
            final CvssSource.CvssEntity rootPartner = ObjectUtils.firstNonNull(entity.getValue().getRootPartner(), entity.getValue().getTopLevelRootPartner());
            if (rootPartner != null) {
                String rootPartnerKey = KnownCvssEntities.getEntitiesByKeyName().entrySet().stream()
                        .filter(e -> e.getValue() == rootPartner)
                        .findFirst().orElseThrow(() -> new IllegalStateException("Root partner not found."))
                        .getKey();
                out.append("{from: '").append(rootPartnerKey).append("', to: '").append(entity.getKey()).append("'},\n");
            }
        }
        out.append("]);\n");
        out.append("var container = document.getElementById('mynetwork');\n");
        out.append("var data = {nodes: nodes, edges: edges};\n");
        out.append("var options = { edges: { length: 300, width: 0.15, color: { inherit: 'from' }, arrows: { to: { enabled: true } } } };\n");
        out.append("var network = new vis.Network(container, data, options);\n");
        out.append("</script>\n</body>\n</html>");

        FileUtils.write(DocumentationGenerator.getVulnerabilityDocumentationFile("other-topics/security/cvss-cna-network.html"), out.toString(), StandardCharsets.UTF_8);
    }
}
